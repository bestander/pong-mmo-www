@startuml
title 2 player game creation and disposal in time 

participant webClient2
participant webClient1
participant PongSocket1
participant PongSocket2
participant GameLobby
participant PongGame
participant PongGameEventsEmitter

GameLobby -> GameLobby: on server boot
activate GameLobby


== player 1 joins and creates a game ==

webClient1 -> PongSocket1: connect
activate PongSocket1

PongSocket1 -> PongSocket1: defineHandlers()
webClient1 -> PongSocket1: emit(startGame)
PongSocket1 -> GameLobby: getGame()
GameLobby -> PongGame: constructor
activate PongGame
PongGame -> PongGameEventsEmitter: constructor
activate PongGameEventsEmitter
PongGame <-- PongGameEventsEmitter
GameLobby <-- PongGame
GameLobby -> GameLobby: subscribe to PongGameEventsEmitter \n game lifecycle events

' game state update
PongSocket1 -> PongSocket1: periodicClientUpdate()
activate PongSocket1 #FFBBBB
deactivate PongSocket1

GameLobby --> PongSocket1: game
PongSocket1 -> PongSocket1: subscribe to PongGameEventsEmitter \n game events
PongSocket1 -> PongGame: joinPlayer(1)

' game state update
PongSocket1 -> PongSocket1: periodicClientUpdate()
activate PongSocket1 #FFBBBB
PongSocket1 -> PongGame: getObjectsPositions
PongSocket1 <-- PongGame: array of positions
PongSocket1 -> webClient1: on(worldUpdate)
deactivate PongSocket1

== player 2 joins player1 game ==
webClient2 -> PongSocket2: connect
activate PongSocket2
PongSocket2 -> PongSocket2: defineHandlers()
webClient2 -> PongSocket2: emit(joinGame, webClient1GameId)
PongSocket2 -> GameLobby: getGame(webClient1GameId)
GameLobby --> PongSocket2: game
PongSocket2 -> PongGame: joinPlayer(2)
PongGame --> PongGameEventsEmitter: emit(gameIsFull)
PongGameEventsEmitter --> GameLobby: on(gameIsFull, game)

' game state update
PongSocket1 -> PongSocket1: periodicClientUpdate()
activate PongSocket1 #FFBBBB
PongSocket1 -> PongGame: getObjectsPositions
PongSocket1 <-- PongGame: array of positions
PongSocket1 -> webClient1: on(worldUpdate)
deactivate PongSocket1

PongSocket2 -> PongSocket2: periodicClientUpdate()
activate PongSocket2 #FFBBBB
PongSocket2 -> PongGame: getObjectsPositions
PongSocket2 <-- PongGame: array of positions
PongSocket2 -> webClient2: on(worldUpdate)
deactivate PongSocket2

== start match ==
webClient2 -> PongSocket2: emit(ready)
PongSocket2 -> PongGame: ready(2)
PongGame --> PongGameEventsEmitter: emit(playerReady, 2)
PongGameEventsEmitter --> PongSocket1: on(playerReady, 2)
PongGameEventsEmitter --> PongSocket2: on(playerReady, 2)

' game state update
PongSocket1 -> PongSocket1: periodicClientUpdate()
activate PongSocket1 #FFBBBB
PongSocket1 -> PongGame: getObjectsPositions
PongSocket1 <-- PongGame: array of positions
PongSocket1 -> webClient1: on(worldUpdate, player2Ready)
deactivate PongSocket1

PongSocket2 -> PongSocket2: periodicClientUpdate()
activate PongSocket2 #FFBBBB
PongSocket2 -> PongGame: getObjectsPositions
PongSocket2 <-- PongGame: array of positions
PongSocket2 -> webClient2: on(worldUpdate, player2Ready)
deactivate PongSocket2

webClient1 -> PongSocket1: emit(ready)
PongSocket1 -> PongGame: ready(2)
PongGame --> PongGameEventsEmitter: emit(playerReady, 1)
PongGame --> PongGameEventsEmitter: emit(gameStarted)
PongGameEventsEmitter --> PongSocket1: on(playerReady, 1)
PongGameEventsEmitter --> PongSocket2: on(playerReady, 1)
PongGameEventsEmitter --> PongSocket1: on(gameStarted)
PongGameEventsEmitter --> PongSocket2: on(gameStarted)

' game state update
PongSocket1 -> PongSocket1: periodicClientUpdate()
activate PongSocket1 #FFBBBB
PongSocket1 -> PongGame: getObjectsPositions
PongSocket1 <-- PongGame: array of positions
PongSocket1 -> webClient1: on(worldUpdate, player1Ready, gameStarted)
deactivate PongSocket1

PongSocket2 -> PongSocket2: periodicClientUpdate()
activate PongSocket2 #FFBBBB
PongSocket2 -> PongGame: getObjectsPositions
PongSocket2 <-- PongGame: array of positions
PongSocket2 -> webClient2: on(worldUpdate, player1Ready, gameStarted)
deactivate PongSocket2


== player 1 quits ==
webClient1 -> PongSocket1: disconnect
PongSocket1 -> PongGame: playerQuit(1)
PongGame --> PongGameEventsEmitter: emit(playerQuit, 1)
PongGameEventsEmitter --> PongSocket1: on(playerQuit, 1)
PongGame --> PongGameEventsEmitter: emit(gameNotFull)
PongGameEventsEmitter --> GameLobby: on(gameNotFull)
destroy PongSocket1

' game state update
PongSocket2 -> PongSocket2: periodicClientUpdate()
activate PongSocket2 #FFBBBB
PongSocket2 -> PongGame: getObjectsPositions
PongSocket2 <-- PongGame: array of positions
PongSocket2 -> webClient2: on(worldUpdate, playerQuit)
deactivate PongSocket2

== player 2 quits ==
webClient2 -> PongSocket2: disconnect
PongSocket2 -> PongGame: playerQuit(2)
PongGame --> PongGameEventsEmitter: emit(playerQuit, 1)
PongGame --> PongGameEventsEmitter: emit(gameEmpty)
destroy PongSocket2

PongGameEventsEmitter --> GameLobby: on(gameEmpty)
GameLobby -> PongGame: destroy()
destroy PongGame
GameLobby -> PongGameEventsEmitter: destroy()
destroy PongGameEventsEmitter

@enduml